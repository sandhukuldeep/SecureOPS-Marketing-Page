import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Shield, ArrowLeft, Calendar, Filter, AlertTriangle, CheckCircle, Clock, Search, Download, ChevronDown, ChevronUp, AlertCircle, XCircle } from 'lucide-react';

const VulnerabilityTimeline: React.FC = () => {
  const [timeRange, setTimeRange] = useState<string>('30days');
  const [severityFilter, setSeverityFilter] = useState<string[]>(['critical', 'high', 'medium', 'low']);
  const [statusFilter, setStatusFilter] = useState<string[]>(['open', 'fixed', 'inProgress']);
  const [showFilters, setShowFilters] = useState<boolean>(false);

  // Sample vulnerability data
  const vulnerabilities = [
    {
      id: 'VUL-2025-0142',
      title: 'SQL Injection in Authentication API',
      description: 'A SQL injection vulnerability in the authentication API allows attackers to bypass authentication.',
      severity: 'critical',
      status: 'fixed',
      discoveredDate: '2025-08-01',
      fixedDate: '2025-08-05',
      affectedComponents: ['auth-service', 'api-gateway'],
      cve: 'CVE-2025-1234',
      assignee: 'Sarah Chen'
    },
    {
      id: 'VUL-2025-0143',
      title: 'Cross-Site Scripting in User Profile',
      description: 'A stored XSS vulnerability in the user profile page allows attackers to inject malicious scripts.',
      severity: 'high',
      status: 'fixed',
      discoveredDate: '2025-08-03',
      fixedDate: '2025-08-07',
      affectedComponents: ['frontend-app', 'user-service'],
      cve: 'CVE-2025-5678',
      assignee: 'Michael Rodriguez'
    },
    {
      id: 'VUL-2025-0144',
      title: 'Insecure Direct Object Reference',
      description: 'An IDOR vulnerability allows users to access other users\' data by manipulating resource identifiers.',
      severity: 'high',
      status: 'inProgress',
      discoveredDate: '2025-08-10',
      fixedDate: null,
      affectedComponents: ['data-service', 'api-gateway'],
      cve: 'CVE-2025-9012',
      assignee: 'Alex Johnson'
    },
    {
      id: 'VUL-2025-0145',
      title: 'Outdated Dependency with Known Vulnerabilities',
      description: 'The application uses an outdated version of a library with known security vulnerabilities.',
      severity: 'medium',
      status: 'open',
      discoveredDate: '2025-08-12',
      fixedDate: null,
      affectedComponents: ['payment-service'],
      cve: 'CVE-2025-3456',
      assignee: 'Unassigned'
    },
    {
      id: 'VUL-2025-0146',
      title: 'Missing Rate Limiting on Authentication Endpoint',
      description: 'The authentication endpoint does not implement rate limiting, making it vulnerable to brute force attacks.',
      severity: 'medium',
      status: 'inProgress',
      discoveredDate: '2025-08-15',
      fixedDate: null,
      affectedComponents: ['auth-service'],
      cve: 'CVE-2025-7890',
      assignee: 'Emma Wilson'
    },
    {
      id: 'VUL-2025-0147',
      title: 'Insecure Deserialization',
      description: 'The application deserializes untrusted data without proper validation, allowing attackers to execute arbitrary code.',
      severity: 'critical',
      status: 'open',
      discoveredDate: '2025-08-18',
      fixedDate: null,
      affectedComponents: ['data-service', 'processing-engine'],
      cve: 'CVE-2025-2345',
      assignee: 'David Kim'
    },
    {
      id: 'VUL-2025-0148',
      title: 'Weak Password Policy',
      description: 'The application allows weak passwords that do not meet security standards.',
      severity: 'low',
      status: 'fixed',
      discoveredDate: '2025-07-25',
      fixedDate: '2025-08-02',
      affectedComponents: ['auth-service', 'user-service'],
      cve: 'N/A',
      assignee: 'Sarah Chen'
    }
  ];

  // Helper function to render severity badge
  const renderSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return (
          <div className="flex items-center px-3 py-1 bg-red-500/20 text-red-400 rounded-full">
            <AlertCircle className="w-4 h-4 mr-1" />
            <span>Critical</span>
          </div>
        );
      case 'high':
        return (
          <div className="flex items-center px-3 py-1 bg-orange-500/20 text-orange-400 rounded-full">
            <AlertTriangle className="w-4 h-4 mr-1" />
            <span>High</span>
          </div>
        );
      case 'medium':
        return (
          <div className="flex items-center px-3 py-1 bg-yellow-500/20 text-yellow-400 rounded-full">
            <AlertTriangle className="w-4 h-4 mr-1" />
            <span>Medium</span>
          </div>
        );
      case 'low':
        return (
          <div className="flex items-center px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full">
            <AlertTriangle className="w-4 h-4 mr-1" />
            <span>Low</span>
          </div>
        );
      default:
        return null;
    }
  };

  // Helper function to render status badge
  const renderStatusBadge = (status: string) => {
    switch (status) {
      case 'open':
        return (
          <div className="flex items-center px-3 py-1 bg-red-500/20 text-red-400 rounded-full">
            <XCircle className="w-4 h-4 mr-1" />
            <span>Open</span>
          </div>
        );
      case 'inProgress':
        return (
          <div className="flex items-center px-3 py-1 bg-yellow-500/20 text-yellow-400 rounded-full">
            <Clock className="w-4 h-4 mr-1" />
            <span>In Progress</span>
          </div>
        );
      case 'fixed':
        return (
          <div className="flex items-center px-3 py-1 bg-green-500/20 text-green-400 rounded-full">
            <CheckCircle className="w-4 h-4 mr-1" />
            <span>Fixed</span>
          </div>
        );
      default:
        return null;
    }
  };

  // Filter vulnerabilities based on selected filters
  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    return (
      severityFilter.includes(vuln.severity) &&
      statusFilter.includes(vuln.status)
    );
  });

  // Toggle severity filter
  const toggleSeverityFilter = (severity: string) => {
    if (severityFilter.includes(severity)) {
      setSeverityFilter(severityFilter.filter(s => s !== severity));
    } else {
      setSeverityFilter([...severityFilter, severity]);
    }
  };

  // Toggle status filter
  const toggleStatusFilter = (status: string) => {
    if (statusFilter.includes(status)) {
      setStatusFilter(statusFilter.filter(s => s !== status));
    } else {
      setStatusFilter([...statusFilter, status]);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Background */}
      <div className="fixed inset-0 z-0">
        <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900/20 to-purple-900/20"></div>
      </div>

      {/* Navigation */}
      <nav className="relative z-50 bg-black/10 backdrop-blur-lg border-b border-white/10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                <Shield className="w-8 h-8 text-white" />
              </div>
              <span className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                SecureOPS ASPM
              </span>
            </div>
            <div className="flex items-center space-x-8">
              <Link to="/" className="flex items-center text-blue-400 hover:text-blue-300 transition-colors">
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Home
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Content */}
      <div className="relative z-10 max-w-7xl mx-auto px-6 py-16">
        <div className="flex items-center justify-between mb-12">
          <h1 className="text-4xl font-bold">
            Vulnerability
            <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent"> Timeline </span>
          </h1>
          <div className="flex space-x-4">
            <div className="relative">
              <button 
                className="flex items-center px-4 py-2 bg-gray-800/50 hover:bg-gray-800/70 rounded-lg border border-white/10 transition-colors"
                onClick={() => setShowFilters(!showFilters)}
              >
                <Filter className="w-5 h-5 mr-2" />
                Filters
                {showFilters ? <ChevronUp className="w-4 h-4 ml-2" /> : <ChevronDown className="w-4 h-4 ml-2" />}
              </button>
              {showFilters && (
                <div className="absolute right-0 mt-2 w-64 bg-gray-800 rounded-lg shadow-lg border border-white/10 p-4 z-50">
                  <div className="mb-4">
                    <h3 className="text-sm font-medium text-gray-300 mb-2">Severity</h3>
                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={severityFilter.includes('critical')} 
                          onChange={() => toggleSeverityFilter('critical')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">Critical</span>
                      </label>
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={severityFilter.includes('high')} 
                          onChange={() => toggleSeverityFilter('high')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">High</span>
                      </label>
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={severityFilter.includes('medium')} 
                          onChange={() => toggleSeverityFilter('medium')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">Medium</span>
                      </label>
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={severityFilter.includes('low')} 
                          onChange={() => toggleSeverityFilter('low')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">Low</span>
                      </label>
                    </div>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-300 mb-2">Status</h3>
                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={statusFilter.includes('open')} 
                          onChange={() => toggleStatusFilter('open')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">Open</span>
                      </label>
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={statusFilter.includes('inProgress')} 
                          onChange={() => toggleStatusFilter('inProgress')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">In Progress</span>
                      </label>
                      <label className="flex items-center">
                        <input 
                          type="checkbox" 
                          checked={statusFilter.includes('fixed')} 
                          onChange={() => toggleStatusFilter('fixed')}
                          className="rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-500"
                        />
                        <span className="ml-2 text-sm text-gray-300">Fixed</span>
                      </label>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="relative">
              <button className="flex items-center px-4 py-2 bg-gray-800/50 hover:bg-gray-800/70 rounded-lg border border-white/10 transition-colors">
                <Calendar className="w-5 h-5 mr-2" />
                <span>{timeRange === '7days' ? 'Last 7 Days' : timeRange === '30days' ? 'Last 30 Days' : 'Last 90 Days'}</span>
                <ChevronDown className="w-4 h-4 ml-2" />
              </button>
            </div>
            <button className="flex items-center px-4 py-2 bg-gray-800/50 hover:bg-gray-800/70 rounded-lg border border-white/10 transition-colors">
              <Download className="w-5 h-5 mr-2" />
              Export
            </button>
          </div>
        </div>

        {/* Search Bar */}
        <div className="mb-8">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-3 border border-white/10 rounded-lg bg-gray-800/50 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500"
              placeholder="Search vulnerabilities by title, ID, or CVE..."
            />
          </div>
        </div>

        {/* Vulnerability Timeline */}
        <div className="bg-gray-800/30 backdrop-blur-lg rounded-xl p-6 border border-white/10">
          <h2 className="text-xl font-semibold mb-6">Vulnerability Timeline</h2>
          
          <div className="relative">
            {/* Timeline Line */}
            <div className="absolute left-0 top-0 bottom-0 w-0.5 bg-gray-700"></div>
            
            {/* Timeline Items */}
            <div className="space-y-8 pl-8">
              {filteredVulnerabilities.map((vuln) => (
                <div key={vuln.id} className="relative">
                  {/* Timeline Dot */}
                  <div className={`absolute -left-8 top-0 w-4 h-4 rounded-full border-2 border-gray-900 ${
                    vuln.severity === 'critical' ? 'bg-red-500' :
                    vuln.severity === 'high' ? 'bg-orange-500' :
                    vuln.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'
                  }`}></div>
                  
                  {/* Vulnerability Card */}
                  <div className="bg-gray-800/50 rounded-lg border border-white/10 p-6 hover:bg-gray-800/70 transition-colors">
                    <div className="flex flex-col md:flex-row md:items-center justify-between mb-4">
                      <div className="flex items-center mb-2 md:mb-0">
                        <span className="text-gray-400 mr-2">{vuln.id}</span>
                        <h3 className="text-lg font-medium">{vuln.title}</h3>
                      </div>
                      <div className="flex items-center space-x-3">
                        {renderSeverityBadge(vuln.severity)}
                        {renderStatusBadge(vuln.status)}
                      </div>
                    </div>
                    
                    <p className="text-gray-300 mb-4">{vuln.description}</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="text-gray-400">Discovered:</span>
                        <span className="ml-2 text-gray-300">{vuln.discoveredDate}</span>
                      </div>
                      <div>
                        <span className="text-gray-400">Fixed:</span>
                        <span className="ml-2 text-gray-300">{vuln.fixedDate || 'Not fixed yet'}</span>
                      </div>
                      <div>
                        <span className="text-gray-400">CVE:</span>
                        <span className="ml-2 text-gray-300">{vuln.cve}</span>
                      </div>
                    </div>
                    
                    <div className="mt-4 pt-4 border-t border-white/5">
                      <div className="flex flex-col md:flex-row md:items-center justify-between">
                        <div className="mb-2 md:mb-0">
                          <span className="text-gray-400 text-sm">Affected Components:</span>
                          <div className="flex flex-wrap mt-1">
                            {vuln.affectedComponents.map((component, index) => (
                              <span key={index} className="px-2 py-1 bg-gray-700/50 rounded text-xs text-gray-300 mr-2 mb-2">
                                {component}
                              </span>
                            ))}
                          </div>
                        </div>
                        <div>
                          <span className="text-gray-400 text-sm">Assignee:</span>
                          <span className="ml-2 text-gray-300">{vuln.assignee}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mt-8">
          <div className="bg-gray-800/30 backdrop-blur-lg rounded-xl p-6 border border-white/10">
            <h3 className="text-lg font-medium text-gray-300 mb-4">Total Vulnerabilities</h3>
            <div className="text-4xl font-bold text-blue-400">{vulnerabilities.length}</div>
          </div>
          <div className="bg-gray-800/30 backdrop-blur-lg rounded-xl p-6 border border-white/10">
            <h3 className="text-lg font-medium text-gray-300 mb-4">Open Vulnerabilities</h3>
            <div className="text-4xl font-bold text-red-400">{vulnerabilities.filter(v => v.status === 'open').length}</div>
          </div>
          <div className="bg-gray-800/30 backdrop-blur-lg rounded-xl p-6 border border-white/10">
            <h3 className="text-lg font-medium text-gray-300 mb-4">In Progress</h3>
            <div className="text-4xl font-bold text-yellow-400">{vulnerabilities.filter(v => v.status === 'inProgress').length}</div>
          </div>
          <div className="bg-gray-800/30 backdrop-blur-lg rounded-xl p-6 border border-white/10">
            <h3 className="text-lg font-medium text-gray-300 mb-4">Fixed</h3>
            <div className="text-4xl font-bold text-green-400">{vulnerabilities.filter(v => v.status === 'fixed').length}</div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="relative z-10 border-t border-white/10 bg-black/30 py-8">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-1 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                <Shield className="w-5 h-5 text-white" />
              </div>
              <span className="text-lg font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                SecureOPS ASPM
              </span>
            </div>
            <div className="flex items-center space-x-8">
              <Link to="/privacy" className="text-gray-400 hover:text-white transition-colors">Privacy</Link>
              <Link to="/terms" className="text-gray-400 hover:text-white transition-colors">Terms</Link>
              <Link to="/" className="text-gray-400 hover:text-white transition-colors">Home</Link>
            </div>
          </div>
          <div className="border-t border-white/10 mt-6 pt-6 text-center text-gray-400 text-sm">
            <p>&copy; 2025 SecureOPS ASPM. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default VulnerabilityTimeline;